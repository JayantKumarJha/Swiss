# -*- coding: utf-8 -*-
"""3_Production_Dashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ggMBCcN0YjzKuXUkFNiQ0jwUzxByg5uR
"""

import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px

st.set_page_config(page_title="Production Dashboard", layout="wide")
st.title("📊 Production Dashboard")

uploaded_file = st.file_uploader("📥 Upload Scheduled Excel File", type="xlsx")

if uploaded_file:
    df = pd.read_excel(uploaded_file)

    if "Units Produced" not in df.columns or "Date" not in df.columns:
        st.warning("⚠️ Uploaded file does not contain schedule data with 'Units Produced' and 'Date'.")
    else:
        st.markdown("""
            <style>
                .metric-label { font-weight: bold; font-size: 18px; color: #2c3e50; }
                .block-container { padding-top: 1rem; }
            </style>
        """, unsafe_allow_html=True)

        st.subheader("📌 Key Metrics")
        col1, col2, col3 = st.columns(3)
        col1.metric("📦 Total Units Produced", f"{df['Units Produced'].sum():,}")
        col2.metric("🔁 Total Batches", df[df["Stage"] == "Produce"].shape[0])
        col3.metric("📅 Production Days", df["Date"].nunique())

        st.subheader("📈 Daily Production Analysis")
        daily = df[df["Stage"] == "Produce"].groupby("Date")["Units Produced"].sum().reset_index()

        max_val = daily["Units Produced"].max()
        min_val = daily["Units Produced"].min()
        avg_val = daily["Units Produced"].mean()

        max_date = daily.loc[daily["Units Produced"].idxmax(), "Date"]
        min_date = daily.loc[daily["Units Produced"].idxmin(), "Date"]

        fig = go.Figure()

        # Bar chart for daily production
        fig.add_trace(go.Bar(
            x=daily["Date"], y=daily["Units Produced"],
            name="Daily Production", marker_color='lightblue'
        ))

        # Avg, Min, Max lines
        fig.add_trace(go.Scatter(
            x=daily["Date"], y=[avg_val]*len(daily),
            name="Average", mode="lines", line=dict(color="blue", dash="dash")
        ))
        fig.add_trace(go.Scatter(
            x=daily["Date"], y=[max_val]*len(daily),
            name=f"Max ({int(max_val):,})", mode="lines", line=dict(color="green")
        ))
        fig.add_trace(go.Scatter(
            x=daily["Date"], y=[min_val]*len(daily),
            name=f"Min ({int(min_val):,})", mode="lines", line=dict(color="red")
        ))

        fig.update_layout(
            title="Units Produced Per Day",
            xaxis_title="Date",
            yaxis_title="Units",
            legend_title="Legend",
            template="simple_white"
        )

        st.plotly_chart(fig, use_container_width=True)

        st.markdown("---")
        st.subheader("📌 Production Highlights")
        st.write(f"🟢 **Max Production**: {int(max_val):,} units on **{max_date}**")
        st.write(f"🔴 **Min Production**: {int(min_val):,} units on **{min_date}**")
        st.write(f"🔵 **Average Production**: {int(avg_val):,} units")

        st.markdown("---")
        st.subheader("🧾 Full Schedule Table")
        st.dataframe(df, use_container_width=True)